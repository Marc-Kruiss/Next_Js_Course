import Head from "next/head";
import Image from "next/image";
import Contact from "../components/contact/contact";
import styles from "../styles/Home.module.css";
import React, { useState } from "react";
import { PrismaClient /*Contact*/ } from "@prisma/client";

const prisma = new PrismaClient();

export async function getServerSideProps() {
  const contacts = await prisma.contact.findMany();

  return {
    props: {
      initialContacts: contacts,
    },
  };
}

export default function Home({ initialContacts }) {
  const [contacts, setContacts] = useState(initialContacts);

  const [firstname, setFirstname] = useState("");
  const [lastname, setLastname] = useState("");
  const [email, setEmail] = useState("");
  const [avatar, setAvatar] = useState("");
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex bg-gray-400 h-screen">
        <div className=" w-2/5 h-3/5">
          <label class="block">
            <input
              type="firstname"
              name="firstname"
              class=" ml-5 w-96 h-20 text-slate-700  mt-5 px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block  rounded-md sm:text-sm focus:ring-1"
              placeholder="Firstname"
              onChange={(e) => setFirstname(e.target.value)}
            />
          </label>
          <label class="block">
            <input
              type="lastname"
              name="lastname"
              class=" ml-5 w-96 h-20 text-slate-700  mt-5 px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block  rounded-md sm:text-sm focus:ring-1"
              placeholder="Lastname"
              onChange={(e) => setLastname(e.target.value)}
            />
          </label>
          <label class="block">
            <input
              type="email"
              name="email"
              class=" ml-5 w-96 h-20 text-slate-700  mt-5 px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block  rounded-md sm:text-sm focus:ring-1"
              placeholder="Email"
              onChange={(e) => setEmail(e.target.value)}
            />
          </label>
          <label class="block">
            <input
              type="avatar"
              name="avatar"
              class=" ml-5 w-96 h-20 text-slate-700  mt-5 px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block  rounded-md sm:text-sm focus:ring-1"
              placeholder="Avatar"
              onChange={(e) => setAvatar(e.target.value)}
            />
          </label>
          <button
            class="bg-violet-500 shadow-sm rounded-lg w-4/5 h-8  mt-7 hover:bg-violet-600 active:bg-violet-700 focus:outline-none focus:ring focus:ring-violet-300"
            onClick={async() => {
              const addedContact= await saveContact(firstname, lastname, email, avatar)
              setContacts([...contacts,addedContact])
            }}
          >
            Save changes
          </button>
        </div>
        <div class="bg-blue-400 w-4/5">
          <ul role="list" class="p-6 divide-y divide-slate-200">
            {contacts.map((contact) => {
              return <Contact person={contact} />;
            })}
          </ul>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

async function saveContact(firstname, lastname, email, avatar) {
  const newContact = {
    firstName: firstname,
    lastName: lastname,
    email: email,
    avatar: avatar,
  };

  const response = await fetch("/api/contacts", {
    method: "POST",
    body: JSON.stringify(newContact),
  });
  if (!response.ok) {
    throw new Error(response.statusText);
  }

  return await response.json();
}
